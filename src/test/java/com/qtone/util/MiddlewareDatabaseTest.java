package com.qtone.util;

import com.qtone.util.dao.prod.ProdUcMapper;
import com.qtone.util.dto.StaticsJsPushDataRecordDto;
import com.qtone.util.dto.StudentInfo;
import com.qtone.util.dto.StudentLocationInfo;
import lombok.extern.slf4j.Slf4j;
import org.bson.BsonObjectId;
import org.bson.types.ObjectId;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.aggregation.ProjectionOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.test.context.junit4.SpringRunner;

import javax.annotation.Resource;
import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

/**
 * @Author: zhangpk
 * @Description:
 * @Date:Created in 14:02 2023/12/22
 * @Modified By:
 */
@RunWith(SpringRunner.class)
@SpringBootTest
@Slf4j
public class MiddlewareDatabaseTest {
    @Resource
    ProdUcMapper prodUcMapper;
    @Resource(name = "middlewareMongoTemplate")
    private MongoTemplate middlewareMongoTemplate;


    @Test
    public void staticsJsPushDataRecord(){
        Integer schoolId =10047194;
        String startTime = "2024-01-15 00:00:00";
        String endTime = "2024-01-16 00:00:00";

        Criteria criteria = new Criteria();
        criteria.and("thirdSchoolId").is(schoolId);
        criteria.and("createTime").gte(startTime).lt(endTime);
        // 返回字段
        ProjectionOperation projectionOperation = Aggregation.project()
                .and("$thirdUserId").as("thirdUserId")
                .and("$imei").as("imei")
                .and("$pushLocationNum").as("pushLocationNum");
        // 聚合查询
        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.match(criteria),
                Aggregation.group("thirdUserId")
                        .count().as("pushLocationNum")
                        .last("thirdUserId").as("thirdUserId")
                        .last("imei").as("imei"),
                projectionOperation
        );
        AggregationResults<StaticsJsPushDataRecordDto> outputType = middlewareMongoTemplate.aggregate(aggregation, "JsPushDataRecord", StaticsJsPushDataRecordDto.class);
        List<StaticsJsPushDataRecordDto> list = outputType.getMappedResults();
        List<Integer> studentIds = list.stream().map( a->a.getThirdUserId()).collect(Collectors.toList());
        List<StudentInfo> studentInfos = prodUcMapper.getStudentNameById(studentIds);
        for(StaticsJsPushDataRecordDto recordDto:list){
            for(StudentInfo studentInfo:studentInfos){
                if(recordDto.getThirdUserId().equals(studentInfo.getId())){
                    recordDto.setUserName(studentInfo.getStudentName());
                }
            }
        }
        String[] header = {"用户ID", "用户名称", "imei", "定位推送次数"};
        String fileName = "姑苏环卫数据推送";
        String filePath = "D:\\Deskop\\智学互动\\姑苏环卫用户定位推送数据.xls";
        try {
            PoiUtil.createExcel(filePath, fileName, header, list);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void castStudentName(){
        String fileUrl = "D:\\Deskop\\智学互动\\JsPushDataRecord.csv";

        String outfileUrl = "D:\\Deskop\\智学互动\\JsPushDataRecordOut.csv";

        Integer schoolId =10047194;
        List<StudentInfo> studentName  =prodUcMapper.getStudentIdBySchoolId(schoolId);
        Map<Integer,String> studentNameMap = studentName.stream().collect(Collectors.toMap(StudentInfo::getId,studentInfo -> studentInfo.getStudentName()));
        List<String> studentLocationInfos = new ArrayList<>();
        try {
            List<String> values = TxtUtil.read(fileUrl);
            for(int i=1;i<values.size();i++){
                String str = values.get(i);
                String[] arr = str.split(",");
                Integer studentId =StringUtils.objToInt(arr[0]);
                str = str.replace(studentId+",","");
                str = studentNameMap.get(studentId)+","+str;
                studentLocationInfos.add(str);
            }
            TxtUtil.write(studentLocationInfos,outfileUrl);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    @Test
    public void split() throws IOException {
        String fileUrl = "D:\\Deskop\\智学互动\\JsPushDataRecordOut.csv";
        String fileUrl1 ="D:\\Deskop\\智学互动\\JsPushDataRecordOut1.csv";
        String fileUrl2 ="D:\\Deskop\\智学互动\\JsPushDataRecordOut2.csv";
        String fileUrl3 ="D:\\Deskop\\智学互动\\JsPushDataRecordOut3.csv";
        String fileUrl4 ="D:\\Deskop\\智学互动\\JsPushDataRecordOut4.csv";
        String fileUrl5 ="D:\\Deskop\\智学互动\\JsPushDataRecordOut5.csv";
        String fileUrl6 ="D:\\Deskop\\智学互动\\JsPushDataRecordOut6.csv";
        String imei1="865687060060678,865687060056528,865687060060710,865687060071311,865687060056627,865687060061718,865687060060942,866930052036747,865687060052006,866930052071504,866930052146561,866930052138717,865687060050554,866930052146298,865687060055611,865687060055405,865687060055504,865687060067962,866930052067619,866930052143477,866930052127587,865687060050372,866930052077295,866930052167781,866930052071025,866930052144160,865687060068507,866930052077311,866930052145043,866930052072312,865687060056015,866930052141919,866930052127884,866930052126159,865687060051099,866930052144343,866930052063311,866930052144996,866930052143113,866930052138626,865687060065347,866930052131183,865687060068358,865687060067301,866930052175479,866930052146660,866930052141117,866930052130946,865687060067053,866930052077485,866930052131787,865687060068499,866930052126589,866930052139418,866930052131555,866930052077204,866930052146348,866930052077576,865687060058342,865687060071725,865687060071766,865687060053681,866930052139459,866930052130607,866930052146090,866930052136398,866930052141539,865687060053509,866930052074029,866930052076446,866930052149599,866930052142073,866930052145704,866930052181667,866930052129799,866930052182541,866930052126811,866930052074235,866930052146264,866930052146181,866930052056943,866930052141042,866930052133973,866930052053148,866930052145472,865687060052303,866930052139699,866930052076669,866930052143998,866930052127025,866930052128924,865687060052782,865687060053608,865687060060397,865687060058003,865687060063326,865687060060140,865687061659973,865687060056080";
        String imei2="865687060056098,865687061662050,865687060056924,865687061660849,866930052076503,865687060053822,865687060053731,865687060071485,865687060056460,866930052063790,866930052178879,866930052143659,866930052145423,865687060059274,865687060055637,866930052141869,865687060050414,866930052178218,865687060071279,866930052145993,866930052139350,865687060066071,865687060061221,866930052080612,866930052078335,865687060062906,865687060057088,865687060055959,866930052167963,866930052144582,866930052178549,866930052061455,866930052080778,865687060050505,866930052178739,866930052077741,866930052142024,865687060056692,865687060063854,865687060063953,865687060070750,865687060075783,866930052063162,866930052077477,866930052141646,865687060053624,865687060071816,865687060060173,865687060052600,866930052126688,865687060061056,865687060061031,865687060060249,865687061664346,865687060061353,865687060054572,865687060061999,865687060059571,865687060051339,865687060051461,866930052056919,866930052075539,865687060058110,866930052146223,865687060053715,865687060050364,865687060072111,865687060072020,865687060053673,865687060065545,866930052072858,866930052043685,866930052050953,865687060063482,865687060059613,865687060061262,865687060075320,865687060052618,866930052076339,866930052143030,866930052072684,866930052149698,865687060072699,865687060057849,865687060064597,866930052126118,866930052071769,865687060060793,865687060073408,865687060051792,865687060057757,866930052144830,865687060072954,865687060072921,865687060059621,865687060054614,865687060059647,865687060063516,865687060072939,866930052036184";
        String imei3="865687060061395,865687060057815,865687060059894,865687060055074,865687060073648,865687060054408,865687060058151,866930052075604,865687060061973,866930052126282,865687060061791,865687060063938,865687060066113,865687060065131,865687060064639,865687060064225,865687060064084,865687060054556,865687060073135,865687060059712,865687060059662,866930052128098,865687060066881,866930052131993,866930052143725,865687060061346,865687060054176,865687060063458,865687061655260,865687060066840,865687060067657,866930052138139,865687060066022,865687060070727,866930052138295,866930052143915,865687060064522,865687060064803,866930052141729,865687060066576,865687060059548,865687060054242,865687060062310,865687060054218,865687060057658,865687060058276,865687061664353,865687061662407,866930052130235,865687060050067,865687060067814,866930052078723,866930052056588,866930052144244,866930052143097,866930052130797,866930052076842,866930052077360,866930052078905,866930052036135,865687060056858,866930052128064,866930052130144,866930052143923,865687060055827,866930052130573,866930052144046,866930052181261,866930052131225,865687060059191,865687060054929,865687060065818,865687060054028,865687060054432,865687060054481,866930052141562,865687060074307,865687060051933,865687060053970,865687060055736,865687060065834,865687060063847,865687060054473,865687060054374,865687060074992,865687060073663,865687060055744,865687060074646,865687060050646,865687060051420,865687060065784,865687060064530,865687060054622,866930052143345,865687060053798,865687060071634,865687060055546,865687060073051,865687060069745,865687060071501";
        String imei4="865687060063136,865687060066790,865687060068036,865687060064563,865687060067426,865687060072947,865687060074893,866930052060598,866930052037372,865687060060504,865687060075825,865687060054994,865687060054754,865687060060652,865687060059985,865687060055066,865687060060272,865687060057609,865687060060918,865687060066105,865687060060751,865687060060934,865687061664320,866930052149425,866930052182525,866930052126738,866930052147742,866930052077683,865687060053996,865687060053871,865687060058508,865687060064159,865687060064589,865687060054952,865687060060512,865687060071758,866930052061893,865687060058391,865687060059522,865687060062864,865687060063912,865687060057963,865687060063961,866930052063436,865687060063268,865687060074927,865687060050273,866930052141570,865687060075643,866930052142388,866930052143881,866930052144301,865687060050703,866930052144376,865687060063664,866930052049849,865687060057971,866930052180370,866930052126027,865687060061676,865687060060165,865687060060355,866930052142131,865687060056411,866930052145746,865687060064662,865687060063805,866930052132074,865687060063797,865687060053806,865687060057419,866930052145852,865687060052626,865687060067145,866930052132124,866930052073880,866930052143840,866930052145670,866930052070530,866930052129435,866930052133882,866930052138485,865687060053699,866930052131712,865687060051362,865687061664304,866930052068161,865687060071030,865687060070909,865687060066923,865687060055082,866930052061786,865687060067186,865687060075627,865687060064282,865687060054887,865687060063250,865687060054671,865687060054713,865687060054747";
        String imei5="865687061665095,865687060068002,865687060064654,865687060064944,865687060059555,866930052063006,866930052054286,865687060066543,866930052076867,866930052129161,866930052067692,865687060063318,865687060056940,865687060070354,865687060073481,865687060056205,866930052071363,865687060069406,865687060068085,865687060068168,865687060067871,865687060070339,865687060072160,865687060071295,866930052139665,866930052130649,865687060056650,866930052145696,865687061660773,865687060056189,865687060062021,865687060056270,865687060055157,865687060066857,865687060064472,865687060063656,865687060064977,866930052138121,866930052144491,866930052181998,866930052144772,866930052071751,865687060052147,866930052130912,865687060052097,865687060072012,865687061659619,865687060062047,865687060061569,865687060055868,866930062070696,866930052142016,866930052077436,865687060054002,865687060066501,866930052126860,865687060056205,865687060063862,865687060056163,865687060054036,866930052076859,865687060056668,865687060056825,865687060071881,866930052065969,865687060050679,866930052078731,865687060061601,866930052132033,866930052145456,865687060065529,866930052076388,865687060064324,865687060065669,865687060066964,865687060074711,865687060051164,865687060074943,865687060075908,865687060073986,865687060067392,865687060075114,865687060066998,865687060075726,866930052129773,865687060070974,866930052145373,866930052037224,866930052074698,865687060067863,865687060060090,865687060065909,865687060056882,866930052078681,865687060073531,865687060063706,865687060059241,865687060075379,865687060072616,865687060055553";
        String imei6="865687060069836,865687060068077,865687060052584,865687060051263,865687060055975,865687060050869,865687060054143,866930052143709,866930052183416,865687060072053,865687060056718,865687060066758,865687060062930,865687060055751,865687060064647,865687060073218,866930052076792,865687060057070,865687060067327,866930052073781,866930052129708,865687060066162,865687060056429,865687060055793,866930052130185,865687061653901,866930052076990,865687061658421,865687060072236,865687060071469,865687060071352,865687060066568,865687061653927,865687060072129,865687060072210,865687060060322,865687061663223,865687060073622,865687060070891,865687060054820,865687060057211,865687060063730,866930052145753,866930052145563,865687060064100,865687060072988,865687060066741,865687060074935,865687060072970,865687060071543,866930052143949,865687060066600,866930052069375,865687060071790,865687060075106,865687060071808,865687060069612,866930052078970,865687060056320,866930052072049,866930052148294,865687060062849,865687060059340,865687061653877,865687061662019,865687060072327,865687060050612,8656870611659171,866930052070555,866930052036168,866930052076370,866930052070191,866930052139475,865687060063227,865687060071188,865687061664288,865687061663900,865687061665137,866930052071389,865687060056288,865687060074745,865687060075171,865687060073275,865687060067434,865687060067830,865687060065578,866930052076479,866930052168078,866930052071884,866930052180636,866930052076545,866930052078293,865687060057443,865687060054192,865687061658454,865687061657480,865687061662423,865687061658447,866930052131761,866930052145712,866930052076735,865687060064738,866930052076693,866930052126191,865687060067707,865687060069240,866930052146355,866930052069227";
        List<String> imeis1= Arrays.asList(imei1.split(","));
        List<String> imeis2= Arrays.asList(imei2.split(","));
        List<String> imeis3= Arrays.asList(imei3.split(","));
        List<String> imeis4= Arrays.asList(imei4.split(","));
        List<String> imeis5= Arrays.asList(imei5.split(","));
        List<String> imeis6= Arrays.asList(imei6.split(","));

        List<String> values = TxtUtil.read(fileUrl);
        BufferedWriter bufferedWriter1 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(fileUrl1))));
        BufferedWriter bufferedWriter2 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(fileUrl2))));
        BufferedWriter bufferedWriter3 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(fileUrl3))));
        BufferedWriter bufferedWriter4 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(fileUrl4))));
        BufferedWriter bufferedWriter5 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(fileUrl5))));
        BufferedWriter bufferedWriter6 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(fileUrl6))));
        for(int i=1;i<values.size();i++){
            String str = values.get(i).split(",")[2];
            if(imeis1.contains(str)){
                bufferedWriter1.write(values.get(i) + "\r\n");
                //刷新
                bufferedWriter1.flush();
            } else if(imeis2.contains(str)){
                bufferedWriter2.write(values.get(i) + "\r\n");
                //刷新
                bufferedWriter2.flush();
            } else if(imeis3.contains(str)){
                bufferedWriter3.write(values.get(i) + "\r\n");
                //刷新
                bufferedWriter3.flush();
            } else if(imeis4.contains(str)){
                bufferedWriter4.write(values.get(i) + "\r\n");
                //刷新
                bufferedWriter4.flush();
            } else if(imeis5.contains(str)){
                bufferedWriter5.write(values.get(i) + "\r\n");
                //刷新
                bufferedWriter5.flush();
            } else if(imeis6.contains(str)){
                bufferedWriter6.write(values.get(i) + "\r\n");
                //刷新
                bufferedWriter6.flush();
            }
        }

    }
}
